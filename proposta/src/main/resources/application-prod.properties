
server.port=8081

spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.hibernate.ddl-auto=create-drop
spring.database.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5433/orange
spring.datasource.username=msproposta
spring.datasource.password=password

#scheduled
periodicidade.avalia-cartao=${SCHEDULED_TIME:5000}

#enviroment
api.proposta=${API_PROPOSTA:http://localhost:8888/api}
api.cartao=${API_CARTAO:http://localhost:9999/api/solicitacao}
api.bloqueio=${API_BLOQUEIO:http://localhost:8888/api/cartoes}

#Test
test.proposta=http://localhost:8080/api/propostas
test.cartoes=http://localhost:8080/api/cartoes

#security
## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/nosso-cartao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/certs}
auth.api=${AUTH_API:http://localhost:18080/auth/realms/nosso-cartao/protocol/openid-connect/token}

#actuator
management.endpoints.web.exposure.include=info,health,prometheus
management.endpoints.prometheus.enabled=true

#prometheus
management.metrics.tags.aplicacao=${NOME_DA_APLICACAO:servico_de_proposta}
management.metrics.tags.ambiente=${AMBIENTE:desenvolvimento}

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=propostas

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}
